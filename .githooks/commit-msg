#!/usr/bin/env bash

# Commit message hook for RuZip
# Validates conventional commit format

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Read the commit message
commit_message_file="$1"
commit_message=$(cat "$commit_message_file")

# Skip merge commits and revert commits generated by git
if echo "$commit_message" | grep -qE "^(Merge|Revert)"; then
    print_info "Skipping validation for merge/revert commit"
    exit 0
fi

# Conventional commit regex
# Matches: type(scope): description
# Where type is required, scope is optional, and description is required
conventional_regex="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?(!)?: .{1,72}$"

# Check if commit message follows conventional format
if echo "$commit_message" | head -n1 | grep -qE "$conventional_regex"; then
    print_success "Commit message follows conventional format"
    
    # Extract type and scope for additional validation
    commit_type=$(echo "$commit_message" | head -n1 | sed -E 's/^([a-z]+).*/\1/')
    
    # Check for breaking change indicator
    if echo "$commit_message" | head -n1 | grep -q "!:"; then
        print_warning "Breaking change detected (!) - make sure this is intentional"
    fi
    
    # Check body length if present
    if [ $(echo "$commit_message" | wc -l) -gt 1 ]; then
        # Check if body lines are under 100 characters
        if echo "$commit_message" | tail -n +3 | grep -q ".\{101\}"; then
            print_warning "Some body lines exceed 100 characters"
        fi
    fi
    
    exit 0
else
    print_error "Invalid commit message format!"
    echo ""
    echo "Expected format: <type>[optional scope]: <description>"
    echo ""
    echo "Valid types:"
    echo "  • feat     - A new feature"
    echo "  • fix      - A bug fix"
    echo "  • docs     - Documentation changes"
    echo "  • style    - Code style changes (formatting, etc.)"
    echo "  • refactor - Code refactoring"
    echo "  • perf     - Performance improvements"
    echo "  • test     - Adding or modifying tests"
    echo "  • build    - Build system changes"
    echo "  • ci       - CI/CD changes"
    echo "  • chore    - Maintenance tasks"
    echo "  • revert   - Revert a previous commit"
    echo ""
    echo "Valid scopes for RuZip:"
    echo "  cli, compression, crypto, archive, simd, threading, memory, platform, utils"
    echo ""
    echo "Examples:"
    echo "  feat(compression): add zstd level 22 support"
    echo "  fix(cli): resolve argument parsing issue"
    echo "  docs: update installation guide"
    echo "  perf(simd): optimize memory operations"
    echo "  feat!: drop support for Rust < 1.70"
    echo ""
    echo "Your commit message:"
    echo "  \"$commit_message\""
    echo ""
    
    exit 1
fi
